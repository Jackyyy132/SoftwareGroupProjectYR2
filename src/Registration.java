import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jacky
 */
public class Registration extends javax.swing.JFrame {
    //Initialise account and password array to store account and passwords
    public static ArrayList<String> AccPassArray = new ArrayList<String>();
    public static final String strLower = "abcdefghijklmnopqrstuvwxyz";
    public static final String strUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    /**
     * Creates new form Registration
     */
    public Registration() {
        initComponents();
        //When program runs, will have password requirement label in place but visibility is set to false until user enters wrong password format
        //An HCI issue i face with this is that the user could be colour blind and not be able to see the message
        //The way i combatted this is that only when the user has entered an invalid password requirement, it would come as a pop up
        //This way it would be noticeable to even the colour blind people as a new layout is presented which catches the users attention
        PasswordNeedsLabel.setForeground(Color.red);
        PasswordNeedsLabel.setVisible(false);
        
    }
    
    public static String Encrypt(String PlainT, int key){
        //This is my encryption. I have decided to use shifting letters 5 positions on the alphabet. This is changeable through the code ShiftLetters.
        //The problems with this is that a hacker could just keep testing the encrypted text with their own decryptor and enter their own letter shifter until they find out the real acc and pass.
        //This is a huge issue that should be addressed and taken into consideration when i do another project similar to this for a real business
        String ciphert = "";
        //For loop which loops around all the acc and pass letters
        for (int i = 0; i < PlainT.length(); i++){
            //Checking if the letter is uppercase perform the shift
            if (Character.isUpperCase(PlainT.charAt(i))){
               int CharacterPositionUpper = strUpper.indexOf(PlainT.charAt(i));
               int ShiftLetters = (CharacterPositionUpper + key) % strLower.length();
               char replaceval = strUpper.charAt(ShiftLetters);
               ciphert = ciphert + replaceval;
            }
            //checking if the letter is lower case then perform shift
            else if(Character.isLowerCase(PlainT.charAt(i))){
                int CharacterPosition = strLower.indexOf(PlainT.charAt(i));
                int ShiftLetters = (CharacterPosition + key) % strLower.length();
                char replaceval = strLower.charAt(ShiftLetters);
                ciphert = ciphert + replaceval;
            }
            //This will get all the random characters and put it back in
            else{
                ciphert += PlainT.charAt(i);
            }
        }      
        return ciphert;
    }
    //Does the opposite of encrypt.
    public static String Decrypt(String ciphert, int key){
        String plaint = "";
        for (int i = 0; i < ciphert.length(); i++){
            if (Character.isUpperCase(ciphert.charAt(i))){
                int CharacterPositionUpper = strUpper.indexOf(ciphert.charAt(i));
                int ShiftLetters = (CharacterPositionUpper - key) % strUpper.length();
                if (ShiftLetters < 0){
                    ShiftLetters = strUpper.length() + ShiftLetters;
                }
                char replaceval = strUpper.charAt(ShiftLetters);
                plaint = plaint + replaceval;
            }
            else if(Character.isLowerCase(ciphert.charAt(i))){
                int CharacterPositionUpper = strLower.indexOf(ciphert.charAt(i));
                int ShiftLetters = (CharacterPositionUpper - key) % strLower.length();
                if (ShiftLetters < 0){
                    ShiftLetters = strLower.length() + ShiftLetters;
                }
                char replaceval = strLower.charAt(ShiftLetters);
                plaint = plaint + replaceval;
                }
            else{
                plaint += ciphert.charAt(i);
            }
                
            }
        return plaint;
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        RegisterButton = new javax.swing.JButton();
        RePasswordLabel = new javax.swing.JLabel();
        RegisterLabel = new javax.swing.JLabel();
        UsernameTF = new javax.swing.JTextField();
        UsernameLabel = new javax.swing.JLabel();
        PasswordLabel = new javax.swing.JLabel();
        ClearButton = new javax.swing.JButton();
        PasswordTF = new javax.swing.JPasswordField();
        RePasswordTF = new javax.swing.JPasswordField();
        PasswordNeedsLabel = new javax.swing.JLabel();
        LoginPageButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registration Page");
        setLocation(new java.awt.Point(400, 310));

        RegisterButton.setText("Regsiter my account");
        RegisterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RegisterButtonActionPerformed(evt);
            }
        });

        RePasswordLabel.setText("Re-enter password:");

        RegisterLabel.setText("Register an account");

        UsernameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsernameTFActionPerformed(evt);
            }
        });
        UsernameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                UsernameTFKeyPressed(evt);
            }
        });

        UsernameLabel.setText("Username:");

        PasswordLabel.setText("Password:");

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        PasswordTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordTFActionPerformed(evt);
            }
        });
        PasswordTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                PasswordTFKeyPressed(evt);
            }
        });

        RePasswordTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RePasswordTFKeyPressed(evt);
            }
        });

        PasswordNeedsLabel.setText("Password needs: More than 3 characters, 1 Capital, 1 Digit ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(PasswordNeedsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(RePasswordLabel)
                                    .addComponent(PasswordLabel)
                                    .addComponent(UsernameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(UsernameTF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE)
                                    .addComponent(PasswordTF, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(RePasswordTF, javax.swing.GroupLayout.Alignment.TRAILING)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(ClearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(RegisterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(20, 20, 20))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(RegisterLabel)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(RegisterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UsernameLabel)
                    .addComponent(UsernameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PasswordLabel)
                    .addComponent(PasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RePasswordLabel)
                    .addComponent(RePasswordTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(PasswordNeedsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ClearButton)
                    .addComponent(RegisterButton))
                .addContainerGap())
        );

        LoginPageButton.setText("Already have an account? Click here to log in!");
        LoginPageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoginPageButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(LoginPageButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(LoginPageButton)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void RegisterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RegisterButtonActionPerformed
        //Boolean value which is set to false 
        boolean RegisterValidation = false;
        //Checks whether password has uppercase or not
        boolean HasUppercase = false;
        //Checks whether password has digit or not
        boolean HasDigit = false;
        //Username lower limit, change when needed
        int UsernameLowerLimit = 3;
        //Username upper limit, change when needed
        int UsernameUpperLimit = 15;
        //Password lower limit, change when needed
        int PasswordLowerLimit = 3;
        
        
        //Defining the main loop
        mainLoop:
        //While loop to validate users input for username and password
        while (RegisterValidation == false){
            int ShiftLetters = 5;
            String getUsername = UsernameTF.getText();
            String EncryptedUsername = "";
            EncryptedUsername = Encrypt(getUsername, ShiftLetters);
            //for statement which goes through accpassarray. Checks every second place which is username position
            for (int i = 0; i < AccPassArray.size(); i+=2){
                //If statement used to check whether there is a username already in use or not. Checks for lowercase too
                if (AccPassArray.get(i).toLowerCase().equals(EncryptedUsername.toLowerCase())){
                    JOptionPane.showMessageDialog(rootPane, "I'm sorry. This username has already been taken. Please choose another one", "Username already exists", JOptionPane.INFORMATION_MESSAGE);
                    //If this is the case, break out of the main loop
                    break mainLoop;
                }
            }
            
            //I have created a very huge password requirement in order to boost security on the users account.
            //This will make it very difficult for your password to be guessed as it contains alot of requirements.
            //A downside to this is that there is a chance that the user could forget their password, due to the huge requirement.
            //I gave the user the flexibility to create a username of their choice but with only restrictions of the higher and lower limits.
            //I also checked whether the account exists regardless if they're upper or lower case.
            
            
            //If statement used to check if username password or repassword equals to ""
            if (UsernameTF.getText().equals("") || PasswordTF.getText().equals("") || RePasswordTF.getText().equals("")){
                JOptionPane.showMessageDialog(rootPane, "Please fill out all fields.", "Missing field error", JOptionPane.INFORMATION_MESSAGE);
                //break out of the loop
                break;
            }
            //If statement checks if the username entered is lower or equal to username lower limit variable
            if(UsernameTF.getText().length() <= UsernameLowerLimit){
                JOptionPane.showMessageDialog(rootPane, "Please choose a username with more than 3 characters.", "Username Length Error", JOptionPane.INFORMATION_MESSAGE);
                //break out of loop
                break;
            }
            //If statement checks if username entered exceeds upper limit variable
            if(UsernameTF.getText().length() > UsernameUpperLimit){
                JOptionPane.showMessageDialog(rootPane, "Please choose a username with less than 15 characters.", "Username Length Error", JOptionPane.INFORMATION_MESSAGE);
                //break out of loop
                break;
            }
            //If statement checks whether password is equal to re password textfield
            if (!PasswordTF.getText().equals(RePasswordTF.getText())){
                JOptionPane.showMessageDialog(rootPane, "Passwords do not match. Please check your password.", "Password Error", JOptionPane.INFORMATION_MESSAGE);
                //Sets requirement password label to true
                PasswordNeedsLabel.setVisible(true);
                //breaks out of loop
                break;
            }
            //If statement which checks whether password is less than or equal to lower limit
            if (PasswordTF.getText().length() <= PasswordLowerLimit){
                JOptionPane.showMessageDialog(rootPane, "Please choose a password which contains more than 3 characters, 1 capital letter and 1 digit.", "Password Error", JOptionPane.INFORMATION_MESSAGE);
                //Sets password requirements label to true
                //My Tutor has informed me to set a label for when the user enters an incorrect password format then they could have a label which will inform them of the requirements
                PasswordNeedsLabel.setVisible(true);
                //breaks out of loop
                break;
            }
                //For statement that loops through every single character in the password
                for (int i = 0; i < PasswordTF.getText().length(); i++){
                    //Checks if character has digit in the password at each character
                    if(Character.isDigit(PasswordTF.getText().charAt(i))){
                        //If has digit, then hasdigit variable equals true
                        HasDigit = true;
                        //If has digit is true, then break out of loop
                        break;
                    }
                    //else, set hasdigit to false
                    else{
                        HasDigit = false;
                    }
                }
                //For statement which checks through the password entered
                for (int i = 0; i < PasswordTF.getText().length(); i++){  
                    //If statement which checks if any of the characters in the password has an uppercase
                    if(Character.isUpperCase(PasswordTF.getText().charAt(i))){
                        //if it does, then hasuppercase variable is set to true
                        HasUppercase = true;
                        //break out of the loop
                        break;
                    }
                    //else hasuppercase will be set to false
                    else{
                        HasUppercase = false;
                    }
                }
                //If statement which checks the password requirements. If it satisfies the password requirement, the user will be able to create the account
                if (HasUppercase == true && HasDigit == true){
                    RegisterValidation = true;
                }
                //else the user will be informed to make a better password that meets the requirement
                else{
                    JOptionPane.showMessageDialog(rootPane, "Please choose a password which contains more than 3 characters, 1 capital letter and 1 digit.", "Password Error", JOptionPane.INFORMATION_MESSAGE);
                    PasswordNeedsLabel.setVisible(true);
                    break;
                }
            
        }
        
        

        //If all password and username are within the requirements, add the username and passwords into the textfile
        if (RegisterValidation == true){
            int ShiftLetters = 5;
            String getUsername = UsernameTF.getText();
            String getPassword = PasswordTF.getText();
            String EncryptedUsername = "";
            String EncryptedPassword = "";
            EncryptedUsername = Encrypt(getUsername, ShiftLetters);
            EncryptedPassword = Encrypt(getPassword, ShiftLetters);
            //Add the encrypted account and password to the array "AccPassArray"
            AccPassArray.add(EncryptedUsername);
            AccPassArray.add(EncryptedPassword);
            //Try statement which inputs account and password into a textfile.
            try {
                //"H:\\SECOND YEAR COMPUTER SCIENCE\\Term2\\Software\\Tutorial1v0.4\\Tutorial1v0.4\\Tutorial1\\AccountPasswords.txt" UNI
                //"C:\\Users\\Jay\\Desktop\\Jacky\\Tutorial1v0.3\\Tutorial1\\AccountPasswords.txt" Home
                BufferedWriter out = new BufferedWriter(new FileWriter("H:\\SECOND YEAR COMPUTER SCIENCE\\Term2\\Software\\Software CW\\Software edit files\\Tutorialv1.4\\AccountPasswords.txt"));
                for (int i = 0; i < AccPassArray.size(); i += 2){
                    out.write(AccPassArray.get(i) + ":");
                    out.write(AccPassArray.get(i+1) + "\r\n");
                }
                JOptionPane.showMessageDialog(rootPane, "You have successfully created an account. You will now be transferred to the login page.", "Registration successful", JOptionPane.INFORMATION_MESSAGE);
                //Encrypting the users account and password
//                String s = "";
//                for(int i = 0; i < UsernameTF.getText().length(); i++){
//                    char Character = (char)(UsernameTF.getText().charAt(i));
//                    if (Character >= 'A' && Character <= 'Z') {
//                        s += (char)((Character - 'A' + 1) % 26 + 'A');
//                    }
//                    else if (Character >= 'a' && Character <= 'z') {
//                        s += (char)((Character - 'a' + 1) % 26 + 'a');
//                    }
//                    else{
//                        s += Character;
//                    }
//    
//      System.out.println("String " + s);
//                }
                //Clears the textfields
                UsernameTF.setText("");
                PasswordTF.setText("");
                RePasswordTF.setText("");
                //Disposes the current form and then brings up the login form for the user to log in
                this.dispose();
                Login LinkRegistrationToLogin = new Login();
                LinkRegistrationToLogin.setVisible(true); 
                out.close();
            }
            //catch statement to catch error with textfile. If textfile is not found in the directory or the directory is incorrect.
            catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "Could not save to textfile.", "Textfile error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_RegisterButtonActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        //Used to check if textfields are empty. If so, pop up informing user textfield textfields are all clear.
        if (UsernameTF.getText().equals("") && PasswordTF.getText().equals("") && RePasswordTF.getText().equals("")){
            JOptionPane.showMessageDialog(rootPane, "All fields are clear.", "Clear Error", JOptionPane.INFORMATION_MESSAGE);
        }
        //else clear all the textfields.
        else{
            UsernameTF.setText("");
            PasswordTF.setText("");
            RePasswordTF.setText("");
        }
    }//GEN-LAST:event_ClearButtonActionPerformed

    private void LoginPageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginPageButtonActionPerformed
        //dispose this form
        this.dispose();
        //create link to login page
        Login LinkRegistrationToLogin = new Login();
        //set login page visible
        LinkRegistrationToLogin.setVisible(true);
    }//GEN-LAST:event_LoginPageButtonActionPerformed

    private void UsernameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsernameTFActionPerformed

    }//GEN-LAST:event_UsernameTFActionPerformed

    private void UsernameTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_UsernameTFKeyPressed

    }//GEN-LAST:event_UsernameTFKeyPressed

    private void RePasswordTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RePasswordTFKeyPressed

    }//GEN-LAST:event_RePasswordTFKeyPressed

    private void PasswordTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_PasswordTFKeyPressed

    }//GEN-LAST:event_PasswordTFKeyPressed

    private void PasswordTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordTFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton LoginPageButton;
    private javax.swing.JLabel PasswordLabel;
    private javax.swing.JLabel PasswordNeedsLabel;
    private javax.swing.JPasswordField PasswordTF;
    private javax.swing.JLabel RePasswordLabel;
    private javax.swing.JPasswordField RePasswordTF;
    private javax.swing.JButton RegisterButton;
    private javax.swing.JLabel RegisterLabel;
    private javax.swing.JLabel UsernameLabel;
    private javax.swing.JTextField UsernameTF;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
